<?xml version="1.0"?>

<!--
	all the gazebo-specific aspects of our robot

  http://gazebosim.org/tutorials/?tut=ros_urdf
-->

<robot xmlns:xacro="http://www.ros.org/wiki/xacro">

  <xacro:arg name="laser_visual"  default="false"/>
  <xacro:arg name="camera_visual" default="false"/>
  <xacro:arg name="imu_visual"    default="false"/>
  <!-- ros_control plugin -->
  <!--gazebo>
    <plugin name="gazebo_ros_control" 
            filename="libgazebo_ros_control.so">
      <robotNamespace>/my_robot</robotNamespace>
      <robotParam>/robot_description</robotParam>
      <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
    </plugin>
  </gazebo-->


  <!--
    The plugin broadcasts a body's pose and rates through ROS nav_msgs::Odometry message.
    The plugin broadcasts pose and rate of a body named "chassis" over ROS topic name "my_robot/odom".
  -->
  <gazebo>
    <plugin name="ground_truth" 
            filename="libgazebo_ros_p3d.so">
      <frameName>map</frameName>
      <bodyName>chassis</bodyName>
      <topicName>my_robot/odom</topicName>
      <updateRate>30.0</updateRate>
    </plugin>
  </gazebo>


  <!-- Chassis -->
  <gazebo reference="chassis">

    <mu1>0.3</mu1>
    <mu2>0.3</mu2>

    <material>Gazebo/Red</material>
  </gazebo>


  <!-- Caster wheel -->
  <gazebo reference="caster_wheel">
    <mu1>0.0</mu1>
    <mu2>0.0</mu2>

    <kp>1000000.0</kp>
    <kd>100.0</kd>
    <minDepth>0.001</minDepth>
    <maxVel>1.0</maxVel>

    <material>Gazebo/Chrome</material>
  </gazebo>


  <gazebo>
    <plugin name="differential_drive_controller" 
    		    filename="libgazebo_ros_diff_drive.so">

      <robotNamespace>/</robotNamespace>
    		  
      <alwaysOn>true</alwaysOn>
      <updateRate>100</updateRate>
      <leftJoint>left_wheel_hinge</leftJoint>
      <rightJoint>right_wheel_hinge</rightJoint>
      <!--wheelSeparation>${chassisWidth-2*wheelOffsetY}</wheelSeparation-->
      <wheelSeparation>${2*wheelOffsetY + wheelWidth}</wheelSeparation>
      <wheelDiameter>${2*wheelRadius}</wheelDiameter>
      <torque>20</torque>
      <commandTopic>my_robot/cmd_vel</commandTopic>
      <odometryTopic>my_robot/odom</odometryTopic>
      <odometryFrame>odom</odometryFrame>
      <robotBaseFrame>base_footprint</robotBaseFrame>
      
      <legacyMode>false</legacyMode>
      
      <rosDebugLevel>Debug</rosDebugLevel>
      <publishWheelTF>true</publishWheelTF>
      <publishWheelJointState>true</publishWheelJointState>
      <wheelAcceleration>1</wheelAcceleration>
      <wheelTorque>20</wheelTorque>
      <publishTf>1</publishTf>
      <odometrySource>encoder</odometrySource>
    </plugin>
  </gazebo>

<!--
  <gazebo reference="camera_link">
    <mu1>0.2</mu1>
    <mu2>0.2</mu2>
    <material>Gazebo/Green</material>
    <sensor type="camera" 
            name="camera1">
      <update_rate>30.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
      </camera>
      <plugin name="camera_controller" 
              filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>my_robot/camera1</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>
-->

  <gazebo reference="camera_link">
    <sensor type="depth" name="realsense_R200">
      <pose>$(arg r200_cam_rgb_px) $(arg r200_cam_rgb_py) $(arg r200_cam_rgb_pz) 0 0 0</pose>
      <always_on>true</always_on>
      <visualize>$(arg camera_visual)</visualize>
      <camera>
          <horizontal_fov>1.02974</horizontal_fov>
          <image>
              <width>1920</width>
              <height>1080</height>
              <format>R8G8B8</format>
          </image>
          <depth_camera></depth_camera>
          <clip>
              <near>0.02</near>
              <far>300</far>
          </clip>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_openni_kinect.so">
        <pose>$(arg r200_cam_depth_offset) 0 0 0 0 0</pose>
        <alwaysOn>true</alwaysOn>
            <updateRate>30.0</updateRate>
            <cameraName>my_robot/camera1</cameraName>
            <frameName>camera_link</frameName>
        <imageTopicName>image_raw</imageTopicName>
        <depthImageTopicName>depth/image_raw</depthImageTopicName>
        <pointCloudTopicName>depth/points</pointCloudTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
        <pointCloudCutoff>0.4</pointCloudCutoff>
            <hackBaseline>0.07</hackBaseline>
            <distortionK1>0.0</distortionK1>
            <distortionK2>0.0</distortionK2>
            <distortionK3>0.0</distortionK3>
            <distortionT1>0.0</distortionT1>
            <distortionT2>0.0</distortionT2>
        <CxPrime>0.0</CxPrime>
        <Cx>0.0</Cx>
        <Cy>0.0</Cy>
        <focalLength>0.0</focalLength>
      </plugin>
    </sensor>
  </gazebo>  
  <!-- hokuyo -->
  <gazebo reference="hokuyo_link">
    <!-- Don't use type="gpu_ray" -->
    <sensor type="ray"
            name="head_hokuyo_sensor">
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <update_rate>40</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>1440</samples>
            <resolution>1</resolution>
            <!--min_angle>-1.570796</min_angle>
            <max_angle>1.570796</max_angle-->
            <min_angle>-3.1415926</min_angle>
            <max_angle>3.1415926</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.10</min>
          <max>30.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <!-- Noise parameters based on published spec for Hokuyo laser
               achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
               stddev of 0.01m will put 99.7% of samples within 0.03m of the true
               reading. -->
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      
      <plugin name="gazebo_ros_head_hokuyo_controller" 
              filename="libgazebo_ros_laser.so">
        <topicName>/my_robot/laser/scan</topicName>
        <frameName>hokuyo_link</frameName>
      </plugin>
    </sensor>
  </gazebo>


  <gazebo reference="imu_link">
    <plugin name="imu_plugin" filename="libgazebo_ros_imu.so">
      <alwaysOn>true</alwaysOn>
      <bodyName>base_footprint</bodyName>
      <topicName>/my_robot/imu</topicName>
      <serviceName>imu_service</serviceName>
      <gaussianNoise>0.0</gaussianNoise>
      <updateRate>20.0</updateRate>
    </plugin>
  </gazebo>  

</robot>
